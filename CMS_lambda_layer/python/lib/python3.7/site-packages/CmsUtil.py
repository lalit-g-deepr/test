import boto3
import enum
import json
import uuid
import MySqlUtil
import cms_config

G_STR_PROJECT_PREFIX = 'CMS'
G_STR_DELIM_UNDERSCORE = '_' 
G_STR_SQS = 'SQS'
G_STR_SNS = 'SNS'
G_STR_REGION_EAST = 'us-east-1'

class StatusTypes(enum.Enum):
    eST_Registered = 0
    eST_Launching = 1
    eST_StandBy = 2
    eST_Running = 3
    eST_Pausing = 4
    eST_Resetting = 5
    eST_Stopping = 6
    eST_Terminating = 7
    eST_Terminated = 8
    eST_ServiceStarted = 9
    eST_ServiceConnected = 10
    eST_ServiceDisconnected = 11 

class ServiceTypes(enum.Enum):
    eST_MarketDataServer = 0
    eST_ModelingServer = 1
    eST_Algorithm = 2

class InstanceTypes(enum.Enum):
    eIT_CAR = 0
    eIT_MarketDataServer = 1
    eIT_ModelingServer = 2
    eIT_Algorithm = 3
    eIT_DeepRInsight = 4

class EntityTypes(enum.Enum):
    eET_Service = 0
    eET_Device = 1
    eET_DeviceGroup = 2
    eET_User = 3
    eET_UserGroup = 4

class MessageType(enum.Enum):
    eMT_Command = 0
    eMT_Request = 1
    eMT_Response = 2
    eMT_StatusUpdate = 3
    eMT_MarketData = 4
    eMT_OrderUpdates = 5
    eMT_GeneralMessage = 6

class CommandType(enum.Enum):
    eCT_Launch = 0
    eCT_Terminate = 1
    eCT_Start = 2
    eCT_Pause = 3
    eCT_Restart = 4
    eCT_Stop = 5
    eCT_SetService = 6
    eCT_SetParameters = 7
    
class DestinationType(enum.Enum):
    eDT_InstanceId = 0
    eDT_SnsTopic = 1
    eDT_SqsArn = 2
    eDT_SqsUrl = 3

class ServiceDisconnectType(enum.Enum):
    eSDT_GeneralFailure = 0
    eSDT_ServerNotFound = 1
    eSDT_TimeOut = 2
    eSDT_AuthenticationFailure = 3

class OrderUpdateType(enum.Enum):
    eOUT_PlaceOrder = 0
    eOUT_ReplaceOrder = 1
    eOUT_CancelOrder = 2
    eOUT_CancelAllOrder = 3
    eOUT_OrderAccepted = 4
    eOUT_OrderFilled = 5
    eOUT_OrderCancelled = 6
    eOUT_OrderRejected = 7
    eOUT_CancelRejected = 8
    eOUT_OrderCancelReplaced = 9

class DeleteStatus(enum.Enum):
    eDS_NotDeleted = 0
    eDS_NormalDelete = 1
    eDS_AbnormalDelete = 2

def GenerateUUID():
    return str(uuid.uuid1())

def genSessionId(connection, cursor, a_CallerInstanceId, a_SessionOwnerName):
    print('inside getsessionid')
    MySqlUtil.SelectAll(connection, cursor, cms_config.id_generation_table)
    records = cursor.fetchall()
    session_id = 0
    for row in records:
        session_id = row[1]
        id = session_id
        instance_id = row[0]

    print('session id: {}'.format(session_id))
    
    #update the session id value
    tabNameandId = {"TableName":cms_config.id_generation_table, "IdName":"INSTANCE_ID"}
    session_id = session_id + 1 
    valueDict = {"SESSION_ID":session_id, "INSTANCE_ID":instance_id}
    MySqlUtil.UpdateQuery(connection, cursor, tabNameandId, valueDict)
    return id
    
def genInstanceId(connection, cursor):
    print('inside getinstanceid')
    MySqlUtil.SelectAll(connection, cursor, cms_config.id_generation_table)
    records = cursor.fetchall()
    
    instance_id = 0
    for row in records:
        instance_id = row[0]
        id = instance_id
        session_d = row[1]
    print('instance id: {}'.format(instance_id))
    
    #update the session id value
    tabNameandId = {"TableName":cms_config.id_generation_table, "IdName":"SESSION_ID"}
    instance_id = instance_id + 1 
    valueDict = {"SESSION_ID":session_d,"INSTANCE_ID":instance_id}
    MySqlUtil.UpdateQuery(connection, cursor, tabNameandId, valueDict)
    return id

def create_sqs_queue(id):
    sqs_client = boto3.client('sqs', region_name = G_STR_REGION_EAST)
    new_queue_name = G_STR_PROJECT_PREFIX + G_STR_DELIM_UNDERSCORE + G_STR_SQS + G_STR_DELIM_UNDERSCORE + str(id)
         
    policy_dict = {
        "Version": "2012-10-17",
        "Statement": [{
        "Effect": "Allow",
        "Principal" : {"AWS" : "*"},
        "Action": "sqs:*",
        "Resource": "arn:aws:sqs:*:*:*"
        }]
    }
    print('New Queue Name : ' + new_queue_name)
    queue = sqs_client.create_queue(
        QueueName = new_queue_name, 
        Attributes = {
            'Policy' : json.dumps(policy_dict)
            }
            )
    queue_url = queue['QueueUrl']
    return queue_url

def create_sns_topic(Id):
    sns_client = boto3.client('sns', region_name = G_STR_REGION_EAST)

    sns_topic_name = G_STR_PROJECT_PREFIX + G_STR_DELIM_UNDERSCORE + G_STR_SNS + G_STR_DELIM_UNDERSCORE + str(Id)
    print("Creating SNS topic : " + sns_topic_name)

    # No need to check if topic is already created or not, it will return topic ARN f already created.

    response = sns_client.create_topic(Name=sns_topic_name)
    
    return response['TopicArn']