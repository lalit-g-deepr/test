# -*- coding: utf-8 -*-
"""
Created on Thu May 16 05:08:58 2019

@author: lalit.gangwar
"""
import pymysql
    
def ConnectDatabase(hostEndPoint, databaseName, userName, passWord):
    try:
        connection = pymysql.connect(host=hostEndPoint, db = databaseName, user=userName, passwd=passWord)
        print("connected to database")
        return connection
    except pymysql.Error as e:
        print("Error number pymysql %d: %s" %(e.args[0], e.args[1]))
        
def UpdateQuery(connection, cursor, tableandId, valueDict):
    #update query
    #input = {dict1, dict2}
    #dict1 = table name and idname
    #dict2 = key = input name, value = inputValue

    tableName = tableandId["TableName"]
    id_name = tableandId["IdName"]
    
    sqlQuerry = "Update " + tableName + " set "
    inputValue = tuple()
    count = 1
    lengthDict = len(valueDict)
    for x in valueDict:
        if count < lengthDict:
            sqlQuerry = sqlQuerry + x + " = %s,"
        else:
            sqlQuerry = sqlQuerry + x + " = %s where "
        inputValue = inputValue + (valueDict[x],)
        count = count + 1
    inputValue = inputValue + (valueDict[id_name],)     
    sqlQuerry = sqlQuerry + id_name + "=%s" 
    print(sqlQuerry)
    print(inputValue)
    
    try:
        connection.begin()
        cursor.execute(sqlQuerry, inputValue)
        connection.commit()
    except pymysql.Error as e:
        connection.rollback()
        print("update query failed error pymysql %d: %s" %(e.args[0], e.args[1]))
    
    print(inputValue) 
    
def InsertQuery(connection, cursor, tableName, insertDict):    
    #insert querry
    #input1 tableName, input2 dict: columnName, their value 
    
    sqlInsertQuery = "INSERT INTO " + tableName +" ("
    insertQueryLength = len(insertDict)
    
    count = 1
    tuIns = tuple()
    placeHolderIns = "("
    for x in insertDict:
        if count < insertQueryLength:
            sqlInsertQuery = sqlInsertQuery + x +","
            placeHolderIns = placeHolderIns + "%s, "
        else:
            sqlInsertQuery = sqlInsertQuery + x +") VALUES "
            placeHolderIns = placeHolderIns + "%s)"        
        
        tuIns =tuIns + (insertDict[x],)
        count = count + 1
    sqlInsertQuery = sqlInsertQuery + placeHolderIns
    print(sqlInsertQuery + placeHolderIns)
    print(tuIns)
    
    try:
        connection.begin()
        cursor.execute(sqlInsertQuery, tuIns)
        connection.commit()
    except pymysql.Error as e:
        connection.rollback()
        print("could not insert Value into car table error pymysql %d: %s" %(e.args[0], e.args[1]))
    
    
def SelectAll(connection, cursor, tableName): 
    #select query
    #1 select all, car table name
    sqlQuerySelectAll = "select * from "+ tableName
    print(sqlQuerySelectAll)
    
    try:
        connection.begin()
        cursor.execute(sqlQuerySelectAll)
        connection.commit()
    except pymysql.Error as e:
        connection.rollback()
        print("selection query error pymysql %d: %s" %(e.args[0], e.args[1]))
    
def SelectFromQuery(connection, cursor, tableNameandId, inputValue):
    #2 selectWithId
    tableName = tableNameandId['TableName']
    id_name = tableNameandId['IdName']
    
    sqlQuerySelectWithId = "select * from " + tableName + " where " + id_name + " = %s"
    print(sqlQuerySelectWithId)
    
    try:
        connection.begin()
        cursor.execute(sqlQuerySelectWithId, inputValue)
        connection.commit()
    except pymysql.Error as e:
        connection.rollback()
        print("selection query error pymysql %d: %s" %(e.args[0], e.args[1]))

def SelectFromColumnQuery(connection, cursor, tableNameandId, columnName, inputValue):
    tableName = tableNameandId["TableName"]
    id_name = tableNameandId["IdName"]
    
    sqlQuerySelectColumnVal = "select "+ columnName + " from "+ tableName +" where "+id_name+" =%s"
    print(sqlQuerySelectColumnVal)
    try:
        connection.begin()
        cursor.execute(sqlQuerySelectColumnVal, inputValue)
        connection.commit()
    except pymysql.Error as e:
        connection.rollback()
        print("selection column query error pymysql %d: %s" %(e.args[0], e.args[1]))


def SelectQuery(connection, cursor, tableName,idNameValueDict, andStatement = True):
    sqlQuery = "select * from "+tableName+" where "
    idLenght = len(idNameValueDict)
    print(idLenght)
    idstatement = ''
    count = 1
    valueTuple = tuple()
    for id in idNameValueDict:
        if idLenght != count:
            if andStatement:
                idstatement = idstatement + " " + id + " =%s AND "
            else:
                idstatement = idstatement + " " + id + " =%s OR "
        else:
            idstatement = idstatement + " " + id + " =%s"
        valueTuple = valueTuple + (idNameValueDict[id],)
        count = count + 1
    sqlQuery = sqlQuery + idstatement
    print(sqlQuery)
    print(valueTuple)
    try:
        connection.begin()
        cursor.execute(sqlQuery, valueTuple)
        connection.commit()
    except pymysql.Error as e:
        connection.rollback()
        print("selecetion query error from select query function pymysql %d: %s"%(e.args[0], e.args[1])) 

def ExecuteSqlQuery(connection, cursor, sql_query):
    try:
        connection.begin()
        cursor.execute(sql_query)
        connection.commit()
    except pymysql.Error as e:
        connection.rollback()
        print("from ExecuteSqlQuery function %d: %s"%(e.args[0], e.args[1])) 
        
def CloseConnection(connection):
    try:
        connection.close()
        print("connection closed successfully")
    except pymysql.Error as e:
        print("could not close connection error pymysql %d: %s" %(e.args[0], e.args[1]))        